---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Application that uses the ASP.NET Core framework running
  in Amazon Lambda.

Parameters:
  Environment:
    Type: String

  ProjectName:
    Type: String
  
  BucketName:
    Type: String

  Key:
    Type: String

Mappings:
  EnvironmentMapping:
    development:
      EnvironmentVariable: 'Development'
    staging:
      EnvironmentVariable: 'Staging'
    production:
      EnvironmentVariable: 'Production'
    

Resources:
  AspNetCoreIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      - arn:aws:iam::aws:policy/SecretsManagerReadWrite 
             
  AspNetCoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      Environment:
        Variables:
          ASPNETCORE_ENVIRONMENT:
            Fn::FindInMap:
              - EnvironmentMapping
              - Ref: Environment
              - EnvironmentVariable
      FunctionName: !Sub "${ProjectName}-${Environment}"
      Handler: ${ProjectName}
      Runtime: dotnet6
      CodeUri:
        Bucket: !Ref BucketName
        Key: !Ref Key
      MemorySize: 256
      Timeout: 30
      Role: !GetAtt AspNetCoreIamRole.Arn
      Events:
        RootResource:
          Type: Api
          Properties:
            Path: "/ci-cd-demo"
            Method: ANY

  AspNetCoreApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "My API"
          version: "1.0"
        paths:
          /myresource:
            get:
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AspNetCoreFunction.Arn}/invocations
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: aws_proxy

  MyApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AspNetCoreApi

  MyApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref MyApiDeployment
      RestApiId: !Ref AspNetCoreApi
      StageName: prod

  LambdaPermissionForApiGateway:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AspNetCoreFunction.Arn
      Principal: apigateway.amazonaws.com

